definitions:
  docker: &default-docker
    - image: python:3.7-alpine3.11
  steps:
    - run: &default-dependencies
        name: Install dependencies
        command: |
          apk add --update ansible npm tar gzip curl
          pip3 install --upgrade pip
          pip3 install awscli
          aws --version

version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: $MEMSTASH_TOKEN" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if [[ $SUCCESS -eq 1 ]]; then
              echo "Reverting migrations"
              cd ~/project/backend
              npm install
              npm run migrations:revert
            else
              echo "No migrations to revert. Exiting"
            fi

jobs:
  build-frontend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend analysis
          command: |
            cd frontend
            npm audit fix --audit-level=critical

  scan-backend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend analysis
          command: |
            cd backend
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
              curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" -X PUT -d "${BACKEND_IP}" https://api.memstash.io/values/udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment # on failure

  configure-infrastructure:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - add_ssh_keys:
          fingerprints:
            - 9d:87:4f:16:9b:57:54:1a:10:1b:3e:c3:26:80:07:21
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment # on failure

  run-migrations:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations > output.txt
            cat output.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" backend/output.txt; then curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" -X PUT -d "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}; fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment # on failure
      - revert-migrations # on failure

  deploy-frontend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: $MEMSTASH_TOKEN" https://api.memstash.io/values/udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="https://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
            aws s3 sync ./dist s3://${BUCKET_NAME} --delete
      # Here's where you will add some code to rollback on failure
      - destroy-environment # on failure
      - revert-migrations # on failure

  deploy-backend:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - add_ssh_keys:
          fingerprints:
            - 9d:87:4f:16:9b:57:54:1a:10:1b:3e:c3:26:80:07:21
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Compress backend
          command: |
            tar -czf backend.tar.gz backend/
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook deploy-backend.yml -i inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment # on failure
      - revert-migrations # on failure

  smoke-test:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: $MEMSTASH_TOKEN" https://api.memstash.io/values/udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7})
            curl http://${BACKEND_IP}:3030/api/status
      - run:
          name: Frontend smoke test.
          command: |
            BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
            URL="http://${BUCKET_NAME}.s3-website-us-east-1.amazonaws.com"
            curl -s ${URL} | grep "Welcome"
            # Exits with the status of the previous command. Grep returns 0 if a match is found, 1 if not.
      # Here's where you will add some code to rollback on failure
      - destroy-environment # on failure
      - revert-migrations # on failure

  cloudfront-update:
    docker: *default-docker
    steps:
      - checkout
      - run: *default-dependencies
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-s3" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
      - destroy-environment # on failure
      - revert-migrations # on failure

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          #          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: [9-cleanup-phase]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
